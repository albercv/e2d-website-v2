{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer2/source-files\"\nimport { readingTime } from \"reading-time-estimator\"\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    locale: {\n      type: \"enum\",\n      options: [\"es\", \"en\"],\n      description: \"The locale of the post\",\n      required: true,\n    },\n    slug: {\n      type: \"string\",\n      description: \"The slug of the post\",\n      required: true,\n    },\n    cover: {\n      type: \"string\",\n      description: \"The cover image of the post\",\n      required: false,\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n      description: \"Tags for the post\",\n      required: false,\n    },\n    author: {\n      type: \"string\",\n      description: \"The author of the post\",\n      required: false,\n      default: \"Alberto Carrasco\",\n    },\n    published: {\n      type: \"boolean\",\n      description: \"Whether the post is published\",\n      required: false,\n      default: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => `/${post.locale}/blog/${post.slug}`,\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: (post) => readingTime(post.body.raw, 200, \"es\"),\n    },\n    wordCount: {\n      type: \"number\",\n      resolve: (post) => post.body.raw.split(/\\s+/).length,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,SAAS,mBAAmB;AAErB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,MAAM,IAAI;AAAA,MACpB,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,IAAI,KAAK,MAAM,SAAS,KAAK,IAAI;AAAA,IACtD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IACzD;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK,IAAI,MAAM,KAAK,EAAE;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC;AAAA,IAChB,eAAe,CAAC;AAAA,EAClB;AACF,CAAC;",
  "names": []
}
